<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--<property name="LOG_HOME" value="${catalina.base}/logs"/>-->
    <property name="LOG_HOME" value="/logs"/>
    <!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <Encoding>UTF-8</Encoding>
        <!--日志输出格式：%d表示日期时间，%thread表示线程名，%-5level：级别从左显示5个字符宽度
        %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 %msg：日志消息，%n是换行符-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>[%d{HH:mm:ss.SSS}][%thread][%-5level][sIp=%X{SERVICE_IP},uIp=%X{USER_IP},uId=%X{USER_ID},uName=%X{USER_NAME},platform=%X{SYS_PLATFORM}][%C{56}:%L] %msg%n</pattern>
        </layout>
    </appender>


    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="cars_all" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <file>${LOG_HOME}/cars_all.log</file>
        <!--滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/cars_all_%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxHistory>5</maxHistory>
            <!-- 当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy-->
            <maxFileSize>100KB</maxFileSize>
        </rollingPolicy>

        <encoder>
            <pattern>[%d{HH:mm:ss.SSS}][%thread][%-5level][sIp=%X{SERVICE_IP},uIp=%X{USER_IP},uId=%X{USER_ID},uName=%X{USER_NAME},platform=%X{SYS_PLATFORM}][%C{56}:%L] %msg%n</pattern>
        </encoder>
    </appender>

    <!--对cars_all进行异步补充-->
    <!--<appender name="cars_all_async" class="ch.qos.logback.classic.AsyncAppender">-->
        <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
            <!--<level>DEBUG</level>-->
        <!--</filter>-->
        <!--<queueSize>10485</queueSize>-->
        <!--<discardingThreshold>0</discardingThreshold>-->
        <!--<includeCallerData>true</includeCallerData>-->
        <!--<appender-ref ref="cars_all" />-->
    <!--</appender>-->

    <!--对产生的warn级别的进行收集到文件-->
    <appender name="cars_warn" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <file>${LOG_HOME}/cars_error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/cars_error_%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <maxHistory>10</maxHistory>
        </rollingPolicy>
        <!--
        过滤器，执行一个过滤器会有返回个枚举值，即DENY，NEUTRAL，ACCEPT其中之一。
        返回DENY，日志将立即被抛弃不再经过其他过滤器；
        返回NEUTRAL，有序列表里的下个过滤器过接着处理日志；
        返回ACCEPT，日志会被立即处理，不再经过剩余过滤器。
        -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>           <!--用于配置符合过滤条件的操作-->
            <onMismatch>DENY</onMismatch>    <!--用于配置不符合过滤条件的操作-->
        </filter>
        <encoder>
            <pattern>[%d{HH:mm:ss.SSS}][%thread][%-5level][sIp=%X{SERVICE_IP},uIp=%X{USER_IP},uId=%X{USER_ID},uName=%X{USER_NAME},platform=%X{SYS_PLATFORM}][%C{56}:%L] %msg%n</pattern>
        </encoder>
    </appender>

    <!--对cars_warn进行异步补充-->
    <!--<appender name="cars_warn_async" class="ch.qos.logback.classic.AsyncAppender">-->
        <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
            <!--<level>WARN</level>-->
        <!--</filter>-->
        <!--<queueSize>10485</queueSize>-->
        <!--<discardingThreshold>0</discardingThreshold>-->
        <!--<includeCallerData>true</includeCallerData>-->
        <!--<appender-ref ref="cars_warn" />-->
    <!--</appender>-->


    <!--
    logger主要用于存放日志对象，也可以定义日志类型、级别
    name：表示匹配的logger类型前缀，也就是包的前半部分
    level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
    additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，false：表示只用当前logger的appender-ref，true：表示当前logger的appender-ref和rootLogger的appender-ref都有效

    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
    -->

    <root level="DEBUG">
        <appender-ref ref="stdout" />
        <appender-ref ref="cars_warn"/>
        <appender-ref ref="cars_all"/>
    </root>

    <!--<logger name="com.xiyan" level="debug" >-->
        <!--<appender-ref ref="stdout" />-->
    <!--</logger>-->
    <!--<logger name="com.alibaba.dubbo" level="ERROR"/>-->
    <!--<logger name="org.fl.noodlenotify" level="ERROR"/>-->
</configuration>